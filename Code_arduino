//app
char incomingValue[50];  // Buffer to store the incoming string
int index = 0;
int flag = 0;
const int LED = 9;
//motor
const int stepPin = 5; 
const int dirPin = 2; 
const int enPin = 8;
int speed = 8000;
bool motorEnabled = false;  // Motor start/stop control
bool direction = true;      // Motor direction control (true for HIGH, false for LOW)


void setup() 
{
  //app
  Serial.begin(9600);         
  pinMode(LED, OUTPUT);  // LED
  Serial.println("Setup Complete. Ready to receive commands.");  // Debugging info
//motor
pinMode(stepPin,OUTPUT); 
  pinMode(dirPin,OUTPUT);
  pinMode(enPin,OUTPUT);
  digitalWrite(enPin,LOW);
}

void loop()
{

  //app
  while (Serial.available() > 0)  
  {
    char incomingChar = Serial.read();  // Read each character
    Serial.print("Received: ");  // Debugging info
    Serial.println(incomingChar);  // Show what character was received

    if (incomingChar != '.')  // Check if the character is not the terminator
    {
      incomingValue[index++] = incomingChar;  // Add character to buffer
    } 
    else 
    {
      incomingValue[index] = '\0';  // Null-terminate the string
      index = 0;  // Reset index for the next incoming string
      
      Serial.print("Complete string received: ");  // Debugging info
      Serial.println(incomingValue);  // Print the received string

      // 1. Turn on light
      if (strcmp(incomingValue, "TURN ON") == 0) {
        Serial.println("Command: TURN ON - Turning ON LED");  // Debugging info
        analogWrite(LED, 255);  // Turn on LED with max brightness
      }
      
      // 2. Turn off light
      else if (strcmp(incomingValue, "TURN OFF") == 0) {
        Serial.println("Command: TURN OFF - Turning OFF LED");  // Debugging info
        analogWrite(LED, 0);   // Turn off LED
      }
      
      // 3. Toggle direction with "SIDE" command
      else if (strcmp(incomingValue, "SIDE") == 0) 
      {
        Serial.print("Command: SIDE - Toggling LED, flag = ");  // Debugging info
        Serial.println(flag);
        
        if (flag == 0)
        {
          direction = true;  // Forward direction
          flag = 1;
        }
        else if (flag == 1)
        {
          direction = false;  // Reverse direction
          flag = 0;
        }
      }
      else if (strcmp(incomingValue, "START") == 0) 

         motorEnabled = true;   // Start motor
       else if (strcmp(incomingValue, "STOP") == 0) 

         motorEnabled = false;   // Start motor
        

      // 4. Control speed (assumes input like "50.")
      
      
      
      speed = atoi(incomingValue);  // Convert the string to an integer

      // Reset the buffer index for the next input
      index = 0;

      // Validate and map the speed
      if (speed >= 0 && speed <= 100) {
        Serial.println("Changing speed...");  // Debugging info
        int mappedSpeed = map(speed, 0, 100, 0, 10000);  // Map speed to desired range
        Serial.print("Mapped Speed: ");
        Serial.println(mappedSpeed);  // Display the mapped speed
      } 
    
        
 }
    }
 //motor
 // Set direction based on the command
  digitalWrite(dirPin, direction ? HIGH : LOW);

  // If motor is enabled, run the motor
  if (motorEnabled) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(speed); 
    digitalWrite(stepPin, LOW);
    delayMicroseconds(speed);
  }
  Serial.print("speed ");
  Serial.print(speed);
   Serial.print(" SIDE ");
  Serial.print(direction);
  Serial.print(" motorEnabled ");
  Serial.println(motorEnabled);

}
